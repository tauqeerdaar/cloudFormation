AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation template for EC2 instances with Auto Scaling, VPC, RDS (MySQL), and S3 bucket."

Parameters:
  KeyPairName:
    Description: "Name of an existing EC2 KeyPair for SSH access."
    Type: "AWS::EC2::KeyPair::KeyName"
  InstanceType:
    Description: "EC2 instance type for the Auto Scaling Group."
    Type: "String"
    Default: "t2.micro"
  VpcCidrBlock:
    Description: "CIDR block for the VPC."
    Type: "String"
    Default: "10.0.0.0/16"
  PublicSubnetCidrBlock:
    Description: "CIDR block for the public subnet."
    Type: "String"
    Default: "10.0.1.0/24"
  PrivateSubnetCidrBlock:
    Description: "CIDR block for the private subnet."
    Type: "String"
    Default: "10.0.2.0/24"
  DBSubnetCidrBlock:
    Description: "CIDR block for the database subnet."
    Type: "String"
    Default: "10.0.3.0/24"
  DBSubnet2CidrBlock:
    Description: "CIDR block for the database subnet."
    Type: "String"
    Default: "10.0.4.0/24"
  DBUsername:
    Description: "Username for the RDS MySQL database."
    Type: "String"
    Default: "admin"
  DBPassword:
    Description: "Password for the RDS MySQL database."
    Type: "String"
    NoEcho: True
  RDSInstanceType:
    Description: "RDS instance type."
    Type: "String"
    Default: "db.t3.micro"
  DBAllocatedStorage:
    Description: "Allocated storage for the RDS database (in GB)."
    Type: "Number"
    Default: 20
  EC2AMI:   #kami
    Description: "Ami Image ID for Ec2."
    Type: AWS::EC2::Image::Id
    Default: ami-05ffe3c48a9991133

Resources:

  # creating vpc
  TerryVpc: #kamranVPC
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: "Name"
          Value: "TerryVpc"

  # Subnets
  PublicSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref TerryVpc
      CidrBlock: !Ref PublicSubnetCidrBlock
      MapPublicIpOnLaunch: true # For instances in ASG to have public IP
      AvailabilityZone: !Select [ 0, !GetAZs "" ] # Uses the first available AZ
      Tags:
        - Key: "Name"
          Value: "PublicSubnet"

  PrivateSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref TerryVpc
      CidrBlock: !Ref PrivateSubnetCidrBlock
      AvailabilityZone: !Select [ 0, !GetAZs "" ] # Uses the first available AZ
      Tags:
        - Key: "Name"
          Value: "PrivateSubnet"

  DBSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref TerryVpc
      CidrBlock: !Ref DBSubnetCidrBlock
      AvailabilityZone: !Select [ 0, !GetAZs "" ] # Uses the first available AZ
      Tags:
        - Key: "Name"
          Value: "DBSubnet"

  DBSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref TerryVpc
      CidrBlock: !Ref DBSubnet2CidrBlock
      AvailabilityZone: !Select [ 1, !GetAZs "" ] # Uses the first available AZ
      Tags:
        - Key: "Name"
          Value: "DBSubnet2"

  # Internet Gateway
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  AttachGateway:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref TerryVpc
      InternetGatewayId: !Ref InternetGateway

  # Route Table for Public Subnet
  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref TerryVpc
      Tags:
        - Key: "Name"
          Value: "PublicRouteTable"

  PublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn: "AttachGateway"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # Security Groups
  WebSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allow HTTP and SSH access to EC2 instances"
      VpcId: !Ref TerryVpc
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0" # Consider restricting this in production
      Tags:
        - Key: "Name"
          Value: "WebSecurityGroup"

  DBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allow MySQL access from WebSecurityGroup"
      VpcId: !Ref TerryVpc
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !GetAtt WebSecurityGroup.GroupId
      Tags:
        - Key: "Name"
          Value: "DBSecurityGroup"

  # RDS Subnet Group
  DBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: "Subnet group for RDS database"
      SubnetIds:
        - !Ref DBSubnet
        - !Ref DBSubnet2
      Tags:
        - Key: "Name"
          Value: "DBSubnetGroup"

  # RDS Instance (MySQL)
  TerryRDSInstance:
    Type: "AWS::RDS::DBInstance"
    Properties:
      DBName: "users"
      AllocatedStorage: !Ref DBAllocatedStorage
      DBInstanceClass: !Ref RDSInstanceType
      Engine: "mysql"
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      VPCSecurityGroups:
        - !GetAtt DBSecurityGroup.GroupId
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: false # Recommended for security
      Tags:
        - Key: "Name"
          Value: "TerryRDSInstance"

  # S3 Bucket
  TerryS3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "terry-s3-bucket-${AWS::AccountId}-${AWS::Region}" # Bucket names are global, must be unique, thats why creating with name+accountID+regionName to make it unique.
      Tags:
        - Key: "Name"
          Value: "TerryS3Bucket"

  # EC2 Launch Template (for Auto Scaling Group)
  TerryLaunchTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateName: "TerryLaunchTemplate"
      LaunchTemplateData:
        ImageId: !Ref EC2AMI # Specify a valid Linux AMI ID in Parameters
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyPairName
        SecurityGroupIds:
          - !GetAtt WebSecurityGroup.GroupId
        UserData: # Example UserData to install Apache
          Fn::Base64: |
            #!/bin/bash
            sudo yum update -y
            sudo yum install -y httpd
            sudo systemctl start httpd
            sudo systemctl enable httpd

  # Auto Scaling Group
  TerryASG:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AutoScalingGroupName: "TerryASG"
      MinSize: "3"
      MaxSize: "5"
      DesiredCapacity: "2"
      VPCZoneIdentifier:
        - !Ref PublicSubnet # Launch instances in the public subnet
      LaunchTemplate:
        LaunchTemplateId: !Ref TerryLaunchTemplate
        Version: "1"
      Tags:
        - Key: "Name"
          Value: "TerryASG"
          PropagateAtLaunch: true # Tags propagate to launched instances

Outputs:

  VpcId:
    Description: "VPC ID"
    Value: !Ref TerryVpc

  PublicSubnetId:
    Description: "Public Subnet ID"
    Value: !Ref PublicSubnet

  PrivateSubnetId:
    Description: "Private Subnet ID"
    Value: !Ref PrivateSubnet

  DBSubnetId:
    Description: "Database Subnet ID"
    Value: !Ref DBSubnet

  WebSecurityGroupId:
    Description: "Web Security Group ID"
    Value: !GetAtt WebSecurityGroup.GroupId

  DBSecurityGroupId:
    Description: "Database Security Group ID"
    Value: !GetAtt DBSecurityGroup.GroupId

  RDSInstanceEndpointAddress:
    Description: "RDS Instance Endpoint Address"
    Value: !GetAtt TerryRDSInstance.Endpoint.Address

  S3BucketName:
    Description: "S3 Bucket Name"
    Value: !Ref TerryS3Bucket

  ASGName:
    Description: "Auto Scaling Group Name"
    Value: !Ref TerryASG
